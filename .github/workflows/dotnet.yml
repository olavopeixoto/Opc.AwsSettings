name: .NET

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 9.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Pack NuGet package
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: dotnet pack src/Opc.AwsSettings/Opc.AwsSettings.csproj --configuration Release --no-build --output ./artifacts

      - name: Publish to NuGet.org
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

      - name: Get version from csproj
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        id: get_version
        run: |
          VERSION=$(grep -oP '(?<=<Version>)[^<]+' src/Opc.AwsSettings/Opc.AwsSettings.csproj)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Delete existing release if it exists
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        continue-on-error: true
        run: |
          gh release delete v${{ steps.get_version.outputs.version }} --yes --cleanup-tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          gh release create v${{ steps.get_version.outputs.version }} \
            ./artifacts/Opc.AwsSettings.${{ steps.get_version.outputs.version }}.nupkg \
            --title "Release v${{ steps.get_version.outputs.version }}" \
            --notes "Automated release for version ${{ steps.get_version.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
